#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π
"""

import requests
import json
from typing import Dict, Any


class AutoSessionsTester:
    def __init__(self, base_url: str = "http://localhost:8022"):
        self.base_url = base_url
        self.session = requests.Session()

    def print_response(self, endpoint: str, method: str, response: requests.Response):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ä—É—á–∫–∏"""
        print(f"\n{'=' * 60}")
        print(f"–≠–ù–î–ü–û–ò–ù–¢: {method} {endpoint}")
        print(f"–°–¢–ê–¢–£–° –ö–û–î: {response.status_code}")
        print(f"–ó–ê–ì–û–õ–û–í–ö–ò:")
        for key, value in response.headers.items():
            print(f"  {key}: {value}")

        print(f"\n–¢–ï–õ–û –û–¢–í–ï–¢–ê:")
        try:
            json_data = response.json()
            print(json.dumps(json_data, indent=2, ensure_ascii=False))
        except:
            print(response.text)
        print(f"{'=' * 60}")

    def test_auto_create_sessions(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏–π"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π...")
        try:
            response = self.session.post(f"{self.base_url}/api/v1/sessions/auto-create")
            self.print_response("/api/v1/sessions/auto-create", "POST", response)

            if response.status_code == 200:
                data = response.json()
                created_sessions = data.get("created_sessions", 0)
                active_objects = data.get("active_objects_count", 0)

                print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_sessions} –ø–æ—Å–µ—â–µ–Ω–∏–π –¥–ª—è {active_objects} –æ–±—ä–µ–∫—Ç–æ–≤")
                return True
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π: {response.status_code}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
            return False

    def test_list_sessions_after_auto_create(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è...")
        try:
            response = self.session.get(f"{self.base_url}/api/v1/sessions/list")
            self.print_response("/api/v1/sessions/list", "GET", response)

            if response.status_code == 200:
                data = response.json()
                sessions = data.get("sessions", [])
                total = data.get("total", 0)

                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {total} –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å–µ—â–µ–Ω–∏–π
                if sessions:
                    print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å–µ—â–µ–Ω–∏–π:")
                    for i, session in enumerate(sessions[:5]):
                        print(f"  {i + 1}. ID: {session.get('id')}, "
                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {session.get('user_id')}, "
                              f"–†–æ–ª—å: {session.get('user_role')}, "
                              f"–û–±—ä–µ–∫—Ç: {session.get('object_id')}, "
                              f"–î–∞—Ç–∞: {session.get('visit_date')}")

                return True
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π: {response.status_code}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π: {e}")
            return False

    def test_ping(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ping —Ä—É—á–∫—É"""
        print("\nüèì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ping...")
        try:
            response = self.session.get(f"{self.base_url}/ping")
            self.print_response("/ping", "GET", response)
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ping: {e}")
            return False

    def run_auto_sessions_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π")
        print(f"–ë–∞–∑–æ–≤—ã–π URL: {self.base_url}")

        results = {}

        # –¢–µ—Å—Ç 1: Ping
        results["ping"] = self.test_ping()

        # –¢–µ—Å—Ç 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏–π
        results["auto_create"] = self.test_auto_create_sessions()

        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        results["list_sessions"] = self.test_list_sessions_after_auto_create()

        # –ò—Ç–æ–≥–∏
        print(f"\n{'=' * 60}")
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"{'=' * 60}")
        for test_name, success in results.items():
            status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
            print(f"{test_name.upper()}: {status}")

        total_tests = len(results)
        passed_tests = sum(results.values())
        print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ—à–ª–æ: {passed_tests}")
        print(f"–ù–µ –ø—Ä–æ—à–ª–æ: {total_tests - passed_tests}")

        return results


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π...")
    tester = AutoSessionsTester()
    results = tester.run_auto_sessions_test()

    if all(results.values()):
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
